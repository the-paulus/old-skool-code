ElementQuizView::ElementQuizView(QWidget *parent, ElementQuizDoc *doc) : QWidget(parent)
{
  /** connect doc with the view*/
  //connect(doc, SIGNAL(documentChanged()), this, SLOT(slotDocumentChanged()));

  /*Declare local variables*/
  int tmp_x = 0; 	//temp x coordnate
  int tmp_y = 0;    //temp y coordnate
  int tmp_w = 0;    //temp width
  int tmp_h = 0;    //temp height
  int rnd = 0;
  int ctr = 0;
  int pos = 0;
  QString tmp_string;
  QString sep;
  QTextStream ts(&fChem); //text stream
  QString tmp;

  this->resize(500,500);

  fChem.setName("chem.key"); //open file chem.key
  //create radio buttons for option
  rdoAtomicNumber = new QRadioButton("Atomic Number",this);
  rdoName = new QRadioButton("Name",this);
  rdoSymbol = new QRadioButton("Symbol",this);
  btnGroup = new QButtonGroup("Quiz on..", this);
  cmbName = new QComboBox(false, this);

  //resize rdo buttons
  rdoSymbol->resize(rdoSymbol->width()+32, rdoSymbol->height());
  rdoAtomicNumber->resize(rdoAtomicNumber->width()+32, rdoAtomicNumber->height());
  //set quiz option to name
  rdoName->setChecked(true);

  btnGroup->insert(rdoAtomicNumber);
  btnGroup->insert(rdoName);
  btnGroup->insert(rdoSymbol);
  //btnGroup->hide();

  number_elements = 1;
  if(fChem.open(IO_ReadOnly))     //open chem.key for reading only
  {
  	while(!ts.eof())
  	{
  		tmp = ts.readLine();   //count number of lines. 1 line = 1 element
  		number_elements++;
  	}
  }
  fChem.close();  	      //close file

  /*Pick a random element between
   *1 and the total number of elements*/
  rnd = 1 + ((int)(rand()) % number_elements);

  /*Open chem.key for read only.
   *get the element on line rnd*/
  if(fChem.open(IO_ReadOnly))
  {
	while(ctr != number_elements)
	{
		tmp_string = ts.readLine();
		pos = tmp_string.find(':', 0, false);
		sep = tmp_string.left(pos);
		tmp_string.remove(0, pos+1);
		pos = tmp_string.find(':', 0, false);
		sep = tmp_string.left(pos);
		cmbName->insertItem(sep, -1);
		ctr++;
  	}
  }
  //fprintf(stdout, "\n%s", (const char *)tmp_string);	

  while(ctr != rnd)
  {
  	tmp_string = ts.readLine();
  	ctr++;
  }	
  fChem.close(); //close file

  //Atomic Number
  pos = tmp_string.find(':', 0, false);
  sep = tmp_string.left(pos);
  correct.atomic_number = sep.toInt();
  tmp_string.remove(0, pos+1);
  fprintf(stdout, "\n\nAtomic Number: %s", (const char *)tmp_string);

  //Element Name
  pos = tmp_string.find(':', 0, false);
  sep = tmp_string.left(pos);
  correct.name = sep;
  tmp_string.remove(0, pos+1);
  fprintf(stdout, "\n\nElement Name: %s", (const char *)tmp_string);	

  //Symbol
  pos = tmp_string.find(':', 0, false);
  sep = tmp_string.left(pos);
  correct.symbol = sep;
  tmp_string.remove(0, pos+1);
  fprintf(stdout, "\n\nSymbol: %s", (const char*) tmp_string);

  //Atomic Mass
  pos = tmp_string.find(':', 0, false);
  sep = tmp_string.left(pos);
  correct.atomic_mass = sep.toFloat();
  fprintf(stdout, "\n\nAtomic Mass: %s", (const char*) tmp_string);

  if(rdoName->isChecked())
  	cmbName->highlighted();
  if(rdoAtomicNumber->isChecked())
  	lneAtomicNumber->setText((const char*)correct.atomic_number);
  if(rdoSymbol->isChecked())
  	lneSymbol->setText(correct.symbol);

  //create objects
  lneAtomicMass = new QLineEdit(this);
  lneAtomicNumber = new QLineEdit(this);
  lneSymbol = new QLineEdit(this);
  lblAtomicMass = new QLabel("Atomic Mass:", this);
  lblAtomicNumber = new QLabel("Atomic Number:", this);
  lblName = new QLabel(this, "Name:");
  lblSymbol = new QLabel("Symbol:", this);
  lblQuiz = new QLabel("Quiz On..", this);
  pbAns = new QPushButton("Show Answer",this);
  pbOK = new QPushButton("OK",this);
  pbQuit = new QPushButton("Quit",this);
  tmp_w = this->width() / 5;
  tmp_h = lneAtomicNumber->height();
  tmp_x = 8;
  tmp_y = 8;

  lblAtomicNumber->move(tmp_x, tmp_y);
  lblAtomicNumber->setFont(QFont("Times", 14, QFont::Bold));
  tmp_x += lblAtomicNumber->width() + 8;
  lneAtomicNumber->move(tmp_x, tmp_y);
  tmp_x = 8;
  tmp_y += lblAtomicNumber->height() + 8;

  lblAtomicMass->move(tmp_x, tmp_y);
  lblAtomicMass->setFont(QFont("Times", 14, QFont::Bold));
  tmp_x += lblAtomicMass->width() + 8;
  lneAtomicMass->move(tmp_x, tmp_y);
  tmp_x = 8;
  tmp_y += lblAtomicMass->height() + 8;

  lblSymbol->move(tmp_x, tmp_y);
  lblSymbol->setFont(QFont("Times", 14, QFont::Bold));
  tmp_x += lblSymbol->width() + 8;
  lneSymbol->move(tmp_x, tmp_y);
  tmp_x = 8;
  tmp_y += lblSymbol->height() + 8;

  lblName->move(tmp_x, tmp_y);
  lblName->setFont(QFont("Times", 14, QFont::Bold));
  tmp_x += lblName->width() + 8;
  cmbName->move(tmp_x, tmp_y);
  tmp_x = 8;
  tmp_y += lblName->height() + 8;

  pbOK->move(tmp_x, tmp_y);
  tmp_x += pbOK->width() + 8;
  pbAns->move(tmp_x, tmp_y);
  tmp_x = (this->width() / 4) - (pbQuit->width() / 2) - 8;
  tmp_y += pbOK->height() + 8;
  pbQuit->move(tmp_x, tmp_y);

  tmp_x = this->width() / 2;
  tmp_y = 8;
  lblQuiz->move(tmp_x, tmp_y);
  lblQuiz->setFont(QFont("Times", 18, QFont::Bold));
  tmp_y += lblQuiz->height() + 8;

  rdoAtomicNumber->move(tmp_x, tmp_y);
  tmp_y += rdoAtomicNumber->height() + 8;

  rdoName->move(tmp_x, tmp_y);
  tmp_y += rdoName->height() + 8;

  rdoSymbol->move(tmp_x, tmp_y);

  connect(pbAns, SIGNAL(clicked()), this, SLOT(slotShowAnswer()));
  connect(pbOK, SIGNAL(clicked()), this, SLOT(slotNext()));
  connect(pbQuit, SIGNAL(clicked()), qApp, SLOT(quit()));
}