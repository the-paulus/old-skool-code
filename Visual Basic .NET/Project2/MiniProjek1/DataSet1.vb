'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DataSet1
    Inherits DataSet
    
    Private tableBooking As BookingDataTable
    
    Private tableCustomer As CustomerDataTable
    
    Private tableRoom As RoomDataTable
    
    Private tableRoomType As RoomTypeDataTable
    
    Private tableBookingRoomperRoom As BookingRoomperRoomDataTable
    
    Private tableBookingRoom As BookingRoomDataTable
    
    Private relationRoomBookingRoom As DataRelation
    
    Private relationCustomerBooking As DataRelation
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Booking")) Is Nothing) Then
                Me.Tables.Add(New BookingDataTable(ds.Tables("Booking")))
            End If
            If (Not (ds.Tables("Customer")) Is Nothing) Then
                Me.Tables.Add(New CustomerDataTable(ds.Tables("Customer")))
            End If
            If (Not (ds.Tables("Room")) Is Nothing) Then
                Me.Tables.Add(New RoomDataTable(ds.Tables("Room")))
            End If
            If (Not (ds.Tables("RoomType")) Is Nothing) Then
                Me.Tables.Add(New RoomTypeDataTable(ds.Tables("RoomType")))
            End If
            If (Not (ds.Tables("BookingRoomperRoom")) Is Nothing) Then
                Me.Tables.Add(New BookingRoomperRoomDataTable(ds.Tables("BookingRoomperRoom")))
            End If
            If (Not (ds.Tables("BookingRoom")) Is Nothing) Then
                Me.Tables.Add(New BookingRoomDataTable(ds.Tables("BookingRoom")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Booking As BookingDataTable
        Get
            Return Me.tableBooking
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customer As CustomerDataTable
        Get
            Return Me.tableCustomer
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Room As RoomDataTable
        Get
            Return Me.tableRoom
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RoomType As RoomTypeDataTable
        Get
            Return Me.tableRoomType
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BookingRoomperRoom As BookingRoomperRoomDataTable
        Get
            Return Me.tableBookingRoomperRoom
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BookingRoom As BookingRoomDataTable
        Get
            Return Me.tableBookingRoom
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Booking")) Is Nothing) Then
            Me.Tables.Add(New BookingDataTable(ds.Tables("Booking")))
        End If
        If (Not (ds.Tables("Customer")) Is Nothing) Then
            Me.Tables.Add(New CustomerDataTable(ds.Tables("Customer")))
        End If
        If (Not (ds.Tables("Room")) Is Nothing) Then
            Me.Tables.Add(New RoomDataTable(ds.Tables("Room")))
        End If
        If (Not (ds.Tables("RoomType")) Is Nothing) Then
            Me.Tables.Add(New RoomTypeDataTable(ds.Tables("RoomType")))
        End If
        If (Not (ds.Tables("BookingRoomperRoom")) Is Nothing) Then
            Me.Tables.Add(New BookingRoomperRoomDataTable(ds.Tables("BookingRoomperRoom")))
        End If
        If (Not (ds.Tables("BookingRoom")) Is Nothing) Then
            Me.Tables.Add(New BookingRoomDataTable(ds.Tables("BookingRoom")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableBooking = CType(Me.Tables("Booking"),BookingDataTable)
        If (Not (Me.tableBooking) Is Nothing) Then
            Me.tableBooking.InitVars
        End If
        Me.tableCustomer = CType(Me.Tables("Customer"),CustomerDataTable)
        If (Not (Me.tableCustomer) Is Nothing) Then
            Me.tableCustomer.InitVars
        End If
        Me.tableRoom = CType(Me.Tables("Room"),RoomDataTable)
        If (Not (Me.tableRoom) Is Nothing) Then
            Me.tableRoom.InitVars
        End If
        Me.tableRoomType = CType(Me.Tables("RoomType"),RoomTypeDataTable)
        If (Not (Me.tableRoomType) Is Nothing) Then
            Me.tableRoomType.InitVars
        End If
        Me.tableBookingRoomperRoom = CType(Me.Tables("BookingRoomperRoom"),BookingRoomperRoomDataTable)
        If (Not (Me.tableBookingRoomperRoom) Is Nothing) Then
            Me.tableBookingRoomperRoom.InitVars
        End If
        Me.tableBookingRoom = CType(Me.Tables("BookingRoom"),BookingRoomDataTable)
        If (Not (Me.tableBookingRoom) Is Nothing) Then
            Me.tableBookingRoom.InitVars
        End If
        Me.relationRoomBookingRoom = Me.Relations("RoomBookingRoom")
        Me.relationCustomerBooking = Me.Relations("CustomerBooking")
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-ZA")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableBooking = New BookingDataTable
        Me.Tables.Add(Me.tableBooking)
        Me.tableCustomer = New CustomerDataTable
        Me.Tables.Add(Me.tableCustomer)
        Me.tableRoom = New RoomDataTable
        Me.Tables.Add(Me.tableRoom)
        Me.tableRoomType = New RoomTypeDataTable
        Me.Tables.Add(Me.tableRoomType)
        Me.tableBookingRoomperRoom = New BookingRoomperRoomDataTable
        Me.Tables.Add(Me.tableBookingRoomperRoom)
        Me.tableBookingRoom = New BookingRoomDataTable
        Me.Tables.Add(Me.tableBookingRoom)
        Dim fkc As ForeignKeyConstraint
        fkc = New ForeignKeyConstraint("CustomerBooking", New DataColumn() {Me.tableCustomer.CustomerIDColumn}, New DataColumn() {Me.tableBooking.CustomerIDColumn})
        Me.tableBooking.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New ForeignKeyConstraint("RoomBookingRoom", New DataColumn() {Me.tableRoom.RoomIDColumn}, New DataColumn() {Me.tableBookingRoom.RoomIDColumn})
        Me.tableBookingRoom.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationRoomBookingRoom = New DataRelation("RoomBookingRoom", New DataColumn() {Me.tableRoom.RoomIDColumn}, New DataColumn() {Me.tableBookingRoom.RoomIDColumn}, false)
        Me.Relations.Add(Me.relationRoomBookingRoom)
        Me.relationCustomerBooking = New DataRelation("CustomerBooking", New DataColumn() {Me.tableCustomer.CustomerIDColumn}, New DataColumn() {Me.tableBooking.CustomerIDColumn}, false)
        Me.Relations.Add(Me.relationCustomerBooking)
    End Sub
    
    Private Function ShouldSerializeBooking() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustomer() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRoom() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeRoomType() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBookingRoomperRoom() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBookingRoom() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub BookingRowChangeEventHandler(ByVal sender As Object, ByVal e As BookingRowChangeEvent)
    
    Public Delegate Sub CustomerRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomerRowChangeEvent)
    
    Public Delegate Sub RoomRowChangeEventHandler(ByVal sender As Object, ByVal e As RoomRowChangeEvent)
    
    Public Delegate Sub RoomTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As RoomTypeRowChangeEvent)
    
    Public Delegate Sub BookingRoomperRoomRowChangeEventHandler(ByVal sender As Object, ByVal e As BookingRoomperRoomRowChangeEvent)
    
    Public Delegate Sub BookingRoomRowChangeEventHandler(ByVal sender As Object, ByVal e As BookingRoomRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookingDate As DataColumn
        
        Private columnInvoiceIssued As DataColumn
        
        Private columnInvoiceTotal As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnBookingID As DataColumn
        
        Friend Sub New()
            MyBase.New("Booking")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BookingDateColumn As DataColumn
            Get
                Return Me.columnBookingDate
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceIssuedColumn As DataColumn
            Get
                Return Me.columnInvoiceIssued
            End Get
        End Property
        
        Friend ReadOnly Property InvoiceTotalColumn As DataColumn
            Get
                Return Me.columnInvoiceTotal
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property BookingIDColumn As DataColumn
            Get
                Return Me.columnBookingID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BookingRow
            Get
                Return CType(Me.Rows(index),BookingRow)
            End Get
        End Property
        
        Public Event BookingRowChanged As BookingRowChangeEventHandler
        
        Public Event BookingRowChanging As BookingRowChangeEventHandler
        
        Public Event BookingRowDeleted As BookingRowChangeEventHandler
        
        Public Event BookingRowDeleting As BookingRowChangeEventHandler
        
        Public Overloads Sub AddBookingRow(ByVal row As BookingRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBookingRow(ByVal BookingDate As Date, ByVal InvoiceIssued As Boolean, ByVal InvoiceTotal As Decimal, ByVal parentCustomerRowByCustomerBooking As CustomerRow) As BookingRow
            Dim rowBookingRow As BookingRow = CType(Me.NewRow,BookingRow)
            rowBookingRow.ItemArray = New Object() {BookingDate, InvoiceIssued, InvoiceTotal, parentCustomerRowByCustomerBooking(5), Nothing}
            Me.Rows.Add(rowBookingRow)
            Return rowBookingRow
        End Function
        
        Public Function FindByBookingID(ByVal BookingID As Integer) As BookingRow
            Return CType(Me.Rows.Find(New Object() {BookingID}),BookingRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BookingDataTable = CType(MyBase.Clone,BookingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BookingDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookingDate = Me.Columns("BookingDate")
            Me.columnInvoiceIssued = Me.Columns("InvoiceIssued")
            Me.columnInvoiceTotal = Me.Columns("InvoiceTotal")
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnBookingID = Me.Columns("BookingID")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookingDate = New DataColumn("BookingDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBookingDate)
            Me.columnInvoiceIssued = New DataColumn("InvoiceIssued", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceIssued)
            Me.columnInvoiceTotal = New DataColumn("InvoiceTotal", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnInvoiceTotal)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnBookingID = New DataColumn("BookingID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBookingID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnBookingID}, true))
            Me.columnBookingID.AutoIncrement = true
            Me.columnBookingID.AllowDBNull = false
            Me.columnBookingID.Unique = true
        End Sub
        
        Public Function NewBookingRow() As BookingRow
            Return CType(Me.NewRow,BookingRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BookingRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BookingRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BookingRowChangedEvent) Is Nothing) Then
                RaiseEvent BookingRowChanged(Me, New BookingRowChangeEvent(CType(e.Row,BookingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BookingRowChangingEvent) Is Nothing) Then
                RaiseEvent BookingRowChanging(Me, New BookingRowChangeEvent(CType(e.Row,BookingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BookingRowDeletedEvent) Is Nothing) Then
                RaiseEvent BookingRowDeleted(Me, New BookingRowChangeEvent(CType(e.Row,BookingRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BookingRowDeletingEvent) Is Nothing) Then
                RaiseEvent BookingRowDeleting(Me, New BookingRowChangeEvent(CType(e.Row,BookingRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBookingRow(ByVal row As BookingRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingRow
        Inherits DataRow
        
        Private tableBooking As BookingDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBooking = CType(Me.Table,BookingDataTable)
        End Sub
        
        Public Property BookingDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBooking.BookingDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBooking.BookingDateColumn) = value
            End Set
        End Property
        
        Public Property InvoiceIssued As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableBooking.InvoiceIssuedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBooking.InvoiceIssuedColumn) = value
            End Set
        End Property
        
        Public Property InvoiceTotal As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBooking.InvoiceTotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBooking.InvoiceTotalColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBooking.CustomerIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBooking.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property BookingID As Integer
            Get
                Return CType(Me(Me.tableBooking.BookingIDColumn),Integer)
            End Get
            Set
                Me(Me.tableBooking.BookingIDColumn) = value
            End Set
        End Property
        
        Public Property CustomerRow As CustomerRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CustomerBooking")),CustomerRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CustomerBooking"))
            End Set
        End Property
        
        Public Function IsBookingDateNull() As Boolean
            Return Me.IsNull(Me.tableBooking.BookingDateColumn)
        End Function
        
        Public Sub SetBookingDateNull()
            Me(Me.tableBooking.BookingDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoiceIssuedNull() As Boolean
            Return Me.IsNull(Me.tableBooking.InvoiceIssuedColumn)
        End Function
        
        Public Sub SetInvoiceIssuedNull()
            Me(Me.tableBooking.InvoiceIssuedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsInvoiceTotalNull() As Boolean
            Return Me.IsNull(Me.tableBooking.InvoiceTotalColumn)
        End Function
        
        Public Sub SetInvoiceTotalNull()
            Me(Me.tableBooking.InvoiceTotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableBooking.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableBooking.CustomerIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BookingRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BookingRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BookingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAmountPoints As DataColumn
        
        Private columnCAddress As DataColumn
        
        Private columnCName As DataColumn
        
        Private columnCSurname As DataColumn
        
        Private columnCTel As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnValuedCustomer As DataColumn
        
        Friend Sub New()
            MyBase.New("Customer")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AmountPointsColumn As DataColumn
            Get
                Return Me.columnAmountPoints
            End Get
        End Property
        
        Friend ReadOnly Property CAddressColumn As DataColumn
            Get
                Return Me.columnCAddress
            End Get
        End Property
        
        Friend ReadOnly Property CNameColumn As DataColumn
            Get
                Return Me.columnCName
            End Get
        End Property
        
        Friend ReadOnly Property CSurnameColumn As DataColumn
            Get
                Return Me.columnCSurname
            End Get
        End Property
        
        Friend ReadOnly Property CTelColumn As DataColumn
            Get
                Return Me.columnCTel
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property ValuedCustomerColumn As DataColumn
            Get
                Return Me.columnValuedCustomer
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomerRow
            Get
                Return CType(Me.Rows(index),CustomerRow)
            End Get
        End Property
        
        Public Event CustomerRowChanged As CustomerRowChangeEventHandler
        
        Public Event CustomerRowChanging As CustomerRowChangeEventHandler
        
        Public Event CustomerRowDeleted As CustomerRowChangeEventHandler
        
        Public Event CustomerRowDeleting As CustomerRowChangeEventHandler
        
        Public Overloads Sub AddCustomerRow(ByVal row As CustomerRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomerRow(ByVal AmountPoints As Integer, ByVal CAddress As String, ByVal CName As String, ByVal CSurname As String, ByVal CTel As String, ByVal ValuedCustomer As Boolean) As CustomerRow
            Dim rowCustomerRow As CustomerRow = CType(Me.NewRow,CustomerRow)
            rowCustomerRow.ItemArray = New Object() {AmountPoints, CAddress, CName, CSurname, CTel, Nothing, ValuedCustomer}
            Me.Rows.Add(rowCustomerRow)
            Return rowCustomerRow
        End Function
        
        Public Function FindByCustomerID(ByVal CustomerID As Integer) As CustomerRow
            Return CType(Me.Rows.Find(New Object() {CustomerID}),CustomerRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CustomerDataTable = CType(MyBase.Clone,CustomerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CustomerDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAmountPoints = Me.Columns("AmountPoints")
            Me.columnCAddress = Me.Columns("CAddress")
            Me.columnCName = Me.Columns("CName")
            Me.columnCSurname = Me.Columns("CSurname")
            Me.columnCTel = Me.Columns("CTel")
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnValuedCustomer = Me.Columns("ValuedCustomer")
        End Sub
        
        Private Sub InitClass()
            Me.columnAmountPoints = New DataColumn("AmountPoints", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmountPoints)
            Me.columnCAddress = New DataColumn("CAddress", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAddress)
            Me.columnCName = New DataColumn("CName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCName)
            Me.columnCSurname = New DataColumn("CSurname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCSurname)
            Me.columnCTel = New DataColumn("CTel", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCTel)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnValuedCustomer = New DataColumn("ValuedCustomer", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValuedCustomer)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnCustomerID}, true))
            Me.columnCustomerID.AutoIncrement = true
            Me.columnCustomerID.AllowDBNull = false
            Me.columnCustomerID.Unique = true
        End Sub
        
        Public Function NewCustomerRow() As CustomerRow
            Return CType(Me.NewRow,CustomerRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CustomerRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomerRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomerRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomerRowChanged(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomerRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomerRowChanging(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomerRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomerRowDeleted(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomerRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomerRowDeleting(Me, New CustomerRowChangeEvent(CType(e.Row,CustomerRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomerRow(ByVal row As CustomerRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerRow
        Inherits DataRow
        
        Private tableCustomer As CustomerDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomer = CType(Me.Table,CustomerDataTable)
        End Sub
        
        Public Property AmountPoints As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.AmountPointsColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.AmountPointsColumn) = value
            End Set
        End Property
        
        Public Property CAddress As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.CAddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.CAddressColumn) = value
            End Set
        End Property
        
        Public Property CName As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.CNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.CNameColumn) = value
            End Set
        End Property
        
        Public Property CSurname As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.CSurnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.CSurnameColumn) = value
            End Set
        End Property
        
        Public Property CTel As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.CTelColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.CTelColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As Integer
            Get
                Return CType(Me(Me.tableCustomer.CustomerIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomer.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property ValuedCustomer As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCustomer.ValuedCustomerColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomer.ValuedCustomerColumn) = value
            End Set
        End Property
        
        Public Function IsAmountPointsNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.AmountPointsColumn)
        End Function
        
        Public Sub SetAmountPointsNull()
            Me(Me.tableCustomer.AmountPointsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCAddressNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.CAddressColumn)
        End Function
        
        Public Sub SetCAddressNull()
            Me(Me.tableCustomer.CAddressColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.CNameColumn)
        End Function
        
        Public Sub SetCNameNull()
            Me(Me.tableCustomer.CNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCSurnameNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.CSurnameColumn)
        End Function
        
        Public Sub SetCSurnameNull()
            Me(Me.tableCustomer.CSurnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCTelNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.CTelColumn)
        End Function
        
        Public Sub SetCTelNull()
            Me(Me.tableCustomer.CTelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValuedCustomerNull() As Boolean
            Return Me.IsNull(Me.tableCustomer.ValuedCustomerColumn)
        End Function
        
        Public Sub SetValuedCustomerNull()
            Me(Me.tableCustomer.ValuedCustomerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBookingRows() As BookingRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("CustomerBooking")),BookingRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CustomerRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CustomerRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CustomerRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CustomerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDescription As DataColumn
        
        Private columnFurnished As DataColumn
        
        Private columnImage As DataColumn
        
        Private columnRateperNight As DataColumn
        
        Private columnRoomID As DataColumn
        
        Private columnRoomTypeID As DataColumn
        
        Friend Sub New()
            MyBase.New("Room")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DescriptionColumn As DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        Friend ReadOnly Property FurnishedColumn As DataColumn
            Get
                Return Me.columnFurnished
            End Get
        End Property
        
        Friend ReadOnly Property ImageColumn As DataColumn
            Get
                Return Me.columnImage
            End Get
        End Property
        
        Friend ReadOnly Property RateperNightColumn As DataColumn
            Get
                Return Me.columnRateperNight
            End Get
        End Property
        
        Friend ReadOnly Property RoomIDColumn As DataColumn
            Get
                Return Me.columnRoomID
            End Get
        End Property
        
        Friend ReadOnly Property RoomTypeIDColumn As DataColumn
            Get
                Return Me.columnRoomTypeID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RoomRow
            Get
                Return CType(Me.Rows(index),RoomRow)
            End Get
        End Property
        
        Public Event RoomRowChanged As RoomRowChangeEventHandler
        
        Public Event RoomRowChanging As RoomRowChangeEventHandler
        
        Public Event RoomRowDeleted As RoomRowChangeEventHandler
        
        Public Event RoomRowDeleting As RoomRowChangeEventHandler
        
        Public Overloads Sub AddRoomRow(ByVal row As RoomRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRoomRow(ByVal Description As String, ByVal Furnished As Boolean, ByVal Image As String, ByVal RateperNight As Integer, ByVal RoomTypeID As Integer) As RoomRow
            Dim rowRoomRow As RoomRow = CType(Me.NewRow,RoomRow)
            rowRoomRow.ItemArray = New Object() {Description, Furnished, Image, RateperNight, Nothing, RoomTypeID}
            Me.Rows.Add(rowRoomRow)
            Return rowRoomRow
        End Function
        
        Public Function FindByRoomID(ByVal RoomID As Integer) As RoomRow
            Return CType(Me.Rows.Find(New Object() {RoomID}),RoomRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RoomDataTable = CType(MyBase.Clone,RoomDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RoomDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDescription = Me.Columns("Description")
            Me.columnFurnished = Me.Columns("Furnished")
            Me.columnImage = Me.Columns("Image")
            Me.columnRateperNight = Me.Columns("RateperNight")
            Me.columnRoomID = Me.Columns("RoomID")
            Me.columnRoomTypeID = Me.Columns("RoomTypeID")
        End Sub
        
        Private Sub InitClass()
            Me.columnDescription = New DataColumn("Description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDescription)
            Me.columnFurnished = New DataColumn("Furnished", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFurnished)
            Me.columnImage = New DataColumn("Image", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnImage)
            Me.columnRateperNight = New DataColumn("RateperNight", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRateperNight)
            Me.columnRoomID = New DataColumn("RoomID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomID)
            Me.columnRoomTypeID = New DataColumn("RoomTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomTypeID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnRoomID}, true))
            Me.columnRoomID.AutoIncrement = true
            Me.columnRoomID.AllowDBNull = false
            Me.columnRoomID.Unique = true
        End Sub
        
        Public Function NewRoomRow() As RoomRow
            Return CType(Me.NewRow,RoomRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RoomRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RoomRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RoomRowChangedEvent) Is Nothing) Then
                RaiseEvent RoomRowChanged(Me, New RoomRowChangeEvent(CType(e.Row,RoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RoomRowChangingEvent) Is Nothing) Then
                RaiseEvent RoomRowChanging(Me, New RoomRowChangeEvent(CType(e.Row,RoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RoomRowDeletedEvent) Is Nothing) Then
                RaiseEvent RoomRowDeleted(Me, New RoomRowChangeEvent(CType(e.Row,RoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RoomRowDeletingEvent) Is Nothing) Then
                RaiseEvent RoomRowDeleting(Me, New RoomRowChangeEvent(CType(e.Row,RoomRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRoomRow(ByVal row As RoomRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomRow
        Inherits DataRow
        
        Private tableRoom As RoomDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRoom = CType(Me.Table,RoomDataTable)
        End Sub
        
        Public Property Description As String
            Get
                Try 
                    Return CType(Me(Me.tableRoom.DescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.DescriptionColumn) = value
            End Set
        End Property
        
        Public Property Furnished As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableRoom.FurnishedColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.FurnishedColumn) = value
            End Set
        End Property
        
        Public Property Image As String
            Get
                Try 
                    Return CType(Me(Me.tableRoom.ImageColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.ImageColumn) = value
            End Set
        End Property
        
        Public Property RateperNight As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRoom.RateperNightColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.RateperNightColumn) = value
            End Set
        End Property
        
        Public Property RoomID As Integer
            Get
                Return CType(Me(Me.tableRoom.RoomIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRoom.RoomIDColumn) = value
            End Set
        End Property
        
        Public Property RoomTypeID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRoom.RoomTypeIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoom.RoomTypeIDColumn) = value
            End Set
        End Property
        
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRoom.DescriptionColumn)
        End Function
        
        Public Sub SetDescriptionNull()
            Me(Me.tableRoom.DescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFurnishedNull() As Boolean
            Return Me.IsNull(Me.tableRoom.FurnishedColumn)
        End Function
        
        Public Sub SetFurnishedNull()
            Me(Me.tableRoom.FurnishedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsImageNull() As Boolean
            Return Me.IsNull(Me.tableRoom.ImageColumn)
        End Function
        
        Public Sub SetImageNull()
            Me(Me.tableRoom.ImageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRateperNightNull() As Boolean
            Return Me.IsNull(Me.tableRoom.RateperNightColumn)
        End Function
        
        Public Sub SetRateperNightNull()
            Me(Me.tableRoom.RateperNightColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoomTypeIDNull() As Boolean
            Return Me.IsNull(Me.tableRoom.RoomTypeIDColumn)
        End Function
        
        Public Sub SetRoomTypeIDNull()
            Me(Me.tableRoom.RoomTypeIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function GetBookingRoomRows() As BookingRoomRow()
            Return CType(Me.GetChildRows(Me.Table.ChildRelations("RoomBookingRoom")),BookingRoomRow())
        End Function
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RoomRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RoomRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RoomRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomTypeDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnNumberBeds As DataColumn
        
        Private columnRoomTypeID As DataColumn
        
        Private columnTypeDescription As DataColumn
        
        Friend Sub New()
            MyBase.New("RoomType")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property NumberBedsColumn As DataColumn
            Get
                Return Me.columnNumberBeds
            End Get
        End Property
        
        Friend ReadOnly Property RoomTypeIDColumn As DataColumn
            Get
                Return Me.columnRoomTypeID
            End Get
        End Property
        
        Friend ReadOnly Property TypeDescriptionColumn As DataColumn
            Get
                Return Me.columnTypeDescription
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As RoomTypeRow
            Get
                Return CType(Me.Rows(index),RoomTypeRow)
            End Get
        End Property
        
        Public Event RoomTypeRowChanged As RoomTypeRowChangeEventHandler
        
        Public Event RoomTypeRowChanging As RoomTypeRowChangeEventHandler
        
        Public Event RoomTypeRowDeleted As RoomTypeRowChangeEventHandler
        
        Public Event RoomTypeRowDeleting As RoomTypeRowChangeEventHandler
        
        Public Overloads Sub AddRoomTypeRow(ByVal row As RoomTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddRoomTypeRow(ByVal NumberBeds As Integer, ByVal TypeDescription As String) As RoomTypeRow
            Dim rowRoomTypeRow As RoomTypeRow = CType(Me.NewRow,RoomTypeRow)
            rowRoomTypeRow.ItemArray = New Object() {NumberBeds, Nothing, TypeDescription}
            Me.Rows.Add(rowRoomTypeRow)
            Return rowRoomTypeRow
        End Function
        
        Public Function FindByRoomTypeID(ByVal RoomTypeID As Integer) As RoomTypeRow
            Return CType(Me.Rows.Find(New Object() {RoomTypeID}),RoomTypeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As RoomTypeDataTable = CType(MyBase.Clone,RoomTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New RoomTypeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnNumberBeds = Me.Columns("NumberBeds")
            Me.columnRoomTypeID = Me.Columns("RoomTypeID")
            Me.columnTypeDescription = Me.Columns("TypeDescription")
        End Sub
        
        Private Sub InitClass()
            Me.columnNumberBeds = New DataColumn("NumberBeds", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNumberBeds)
            Me.columnRoomTypeID = New DataColumn("RoomTypeID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomTypeID)
            Me.columnTypeDescription = New DataColumn("TypeDescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeDescription)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnRoomTypeID}, true))
            Me.columnRoomTypeID.AutoIncrement = true
            Me.columnRoomTypeID.AllowDBNull = false
            Me.columnRoomTypeID.Unique = true
        End Sub
        
        Public Function NewRoomTypeRow() As RoomTypeRow
            Return CType(Me.NewRow,RoomTypeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New RoomTypeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RoomTypeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RoomTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent RoomTypeRowChanged(Me, New RoomTypeRowChangeEvent(CType(e.Row,RoomTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RoomTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent RoomTypeRowChanging(Me, New RoomTypeRowChangeEvent(CType(e.Row,RoomTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RoomTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent RoomTypeRowDeleted(Me, New RoomTypeRowChangeEvent(CType(e.Row,RoomTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RoomTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent RoomTypeRowDeleting(Me, New RoomTypeRowChangeEvent(CType(e.Row,RoomTypeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveRoomTypeRow(ByVal row As RoomTypeRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomTypeRow
        Inherits DataRow
        
        Private tableRoomType As RoomTypeDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableRoomType = CType(Me.Table,RoomTypeDataTable)
        End Sub
        
        Public Property NumberBeds As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRoomType.NumberBedsColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomType.NumberBedsColumn) = value
            End Set
        End Property
        
        Public Property RoomTypeID As Integer
            Get
                Return CType(Me(Me.tableRoomType.RoomTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRoomType.RoomTypeIDColumn) = value
            End Set
        End Property
        
        Public Property TypeDescription As String
            Get
                Try 
                    Return CType(Me(Me.tableRoomType.TypeDescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRoomType.TypeDescriptionColumn) = value
            End Set
        End Property
        
        Public Function IsNumberBedsNull() As Boolean
            Return Me.IsNull(Me.tableRoomType.NumberBedsColumn)
        End Function
        
        Public Sub SetNumberBedsNull()
            Me(Me.tableRoomType.NumberBedsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRoomType.TypeDescriptionColumn)
        End Function
        
        Public Sub SetTypeDescriptionNull()
            Me(Me.tableRoomType.TypeDescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class RoomTypeRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As RoomTypeRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As RoomTypeRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As RoomTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingRoomperRoomDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookingID As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnRoomID As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnCName As DataColumn
        
        Friend Sub New()
            MyBase.New("BookingRoomperRoom")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BookingIDColumn As DataColumn
            Get
                Return Me.columnBookingID
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property RoomIDColumn As DataColumn
            Get
                Return Me.columnRoomID
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property CNameColumn As DataColumn
            Get
                Return Me.columnCName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BookingRoomperRoomRow
            Get
                Return CType(Me.Rows(index),BookingRoomperRoomRow)
            End Get
        End Property
        
        Public Event BookingRoomperRoomRowChanged As BookingRoomperRoomRowChangeEventHandler
        
        Public Event BookingRoomperRoomRowChanging As BookingRoomperRoomRowChangeEventHandler
        
        Public Event BookingRoomperRoomRowDeleted As BookingRoomperRoomRowChangeEventHandler
        
        Public Event BookingRoomperRoomRowDeleting As BookingRoomperRoomRowChangeEventHandler
        
        Public Overloads Sub AddBookingRoomperRoomRow(ByVal row As BookingRoomperRoomRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBookingRoomperRoomRow(ByVal BookingID As Integer, ByVal EndDate As Date, ByVal RoomID As Integer, ByVal StartDate As Date, ByVal CName As String) As BookingRoomperRoomRow
            Dim rowBookingRoomperRoomRow As BookingRoomperRoomRow = CType(Me.NewRow,BookingRoomperRoomRow)
            rowBookingRoomperRoomRow.ItemArray = New Object() {BookingID, EndDate, RoomID, StartDate, Nothing, CName}
            Me.Rows.Add(rowBookingRoomperRoomRow)
            Return rowBookingRoomperRoomRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BookingRoomperRoomDataTable = CType(MyBase.Clone,BookingRoomperRoomDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BookingRoomperRoomDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookingID = Me.Columns("BookingID")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnRoomID = Me.Columns("RoomID")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnCName = Me.Columns("CName")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookingID = New DataColumn("BookingID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBookingID)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnRoomID = New DataColumn("RoomID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomID)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnCName = New DataColumn("CName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCName)
            Me.columnCustomerID.AutoIncrement = true
        End Sub
        
        Public Function NewBookingRoomperRoomRow() As BookingRoomperRoomRow
            Return CType(Me.NewRow,BookingRoomperRoomRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BookingRoomperRoomRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BookingRoomperRoomRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BookingRoomperRoomRowChangedEvent) Is Nothing) Then
                RaiseEvent BookingRoomperRoomRowChanged(Me, New BookingRoomperRoomRowChangeEvent(CType(e.Row,BookingRoomperRoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BookingRoomperRoomRowChangingEvent) Is Nothing) Then
                RaiseEvent BookingRoomperRoomRowChanging(Me, New BookingRoomperRoomRowChangeEvent(CType(e.Row,BookingRoomperRoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BookingRoomperRoomRowDeletedEvent) Is Nothing) Then
                RaiseEvent BookingRoomperRoomRowDeleted(Me, New BookingRoomperRoomRowChangeEvent(CType(e.Row,BookingRoomperRoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BookingRoomperRoomRowDeletingEvent) Is Nothing) Then
                RaiseEvent BookingRoomperRoomRowDeleting(Me, New BookingRoomperRoomRowChangeEvent(CType(e.Row,BookingRoomperRoomRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBookingRoomperRoomRow(ByVal row As BookingRoomperRoomRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingRoomperRoomRow
        Inherits DataRow
        
        Private tableBookingRoomperRoom As BookingRoomperRoomDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBookingRoomperRoom = CType(Me.Table,BookingRoomperRoomDataTable)
        End Sub
        
        Public Property BookingID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoomperRoom.BookingIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoomperRoom.BookingIDColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoomperRoom.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoomperRoom.EndDateColumn) = value
            End Set
        End Property
        
        Public Property RoomID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoomperRoom.RoomIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoomperRoom.RoomIDColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoomperRoom.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoomperRoom.StartDateColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoomperRoom.CustomerIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoomperRoom.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property CName As String
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoomperRoom.CNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoomperRoom.CNameColumn) = value
            End Set
        End Property
        
        Public Function IsBookingIDNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoomperRoom.BookingIDColumn)
        End Function
        
        Public Sub SetBookingIDNull()
            Me(Me.tableBookingRoomperRoom.BookingIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoomperRoom.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableBookingRoomperRoom.EndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoomIDNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoomperRoom.RoomIDColumn)
        End Function
        
        Public Sub SetRoomIDNull()
            Me(Me.tableBookingRoomperRoom.RoomIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoomperRoom.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableBookingRoomperRoom.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoomperRoom.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableBookingRoomperRoom.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCNameNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoomperRoom.CNameColumn)
        End Function
        
        Public Sub SetCNameNull()
            Me(Me.tableBookingRoomperRoom.CNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingRoomperRoomRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BookingRoomperRoomRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BookingRoomperRoomRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BookingRoomperRoomRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingRoomDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBookingID As DataColumn
        
        Private columnEndDate As DataColumn
        
        Private columnRoomID As DataColumn
        
        Private columnStartDate As DataColumn
        
        Private columnCustomerID As DataColumn
        
        Private columnCName As DataColumn
        
        Friend Sub New()
            MyBase.New("BookingRoom")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BookingIDColumn As DataColumn
            Get
                Return Me.columnBookingID
            End Get
        End Property
        
        Friend ReadOnly Property EndDateColumn As DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        Friend ReadOnly Property RoomIDColumn As DataColumn
            Get
                Return Me.columnRoomID
            End Get
        End Property
        
        Friend ReadOnly Property StartDateColumn As DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        Friend ReadOnly Property CustomerIDColumn As DataColumn
            Get
                Return Me.columnCustomerID
            End Get
        End Property
        
        Friend ReadOnly Property CNameColumn As DataColumn
            Get
                Return Me.columnCName
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BookingRoomRow
            Get
                Return CType(Me.Rows(index),BookingRoomRow)
            End Get
        End Property
        
        Public Event BookingRoomRowChanged As BookingRoomRowChangeEventHandler
        
        Public Event BookingRoomRowChanging As BookingRoomRowChangeEventHandler
        
        Public Event BookingRoomRowDeleted As BookingRoomRowChangeEventHandler
        
        Public Event BookingRoomRowDeleting As BookingRoomRowChangeEventHandler
        
        Public Overloads Sub AddBookingRoomRow(ByVal row As BookingRoomRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBookingRoomRow(ByVal BookingID As Integer, ByVal EndDate As Date, ByVal parentRoomRowByRoomBookingRoom As RoomRow, ByVal StartDate As Date, ByVal CName As String) As BookingRoomRow
            Dim rowBookingRoomRow As BookingRoomRow = CType(Me.NewRow,BookingRoomRow)
            rowBookingRoomRow.ItemArray = New Object() {BookingID, EndDate, parentRoomRowByRoomBookingRoom(4), StartDate, Nothing, CName}
            Me.Rows.Add(rowBookingRoomRow)
            Return rowBookingRoomRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BookingRoomDataTable = CType(MyBase.Clone,BookingRoomDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BookingRoomDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBookingID = Me.Columns("BookingID")
            Me.columnEndDate = Me.Columns("EndDate")
            Me.columnRoomID = Me.Columns("RoomID")
            Me.columnStartDate = Me.Columns("StartDate")
            Me.columnCustomerID = Me.Columns("CustomerID")
            Me.columnCName = Me.Columns("CName")
        End Sub
        
        Private Sub InitClass()
            Me.columnBookingID = New DataColumn("BookingID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBookingID)
            Me.columnEndDate = New DataColumn("EndDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndDate)
            Me.columnRoomID = New DataColumn("RoomID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRoomID)
            Me.columnStartDate = New DataColumn("StartDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartDate)
            Me.columnCustomerID = New DataColumn("CustomerID", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCustomerID)
            Me.columnCName = New DataColumn("CName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCName)
            Me.columnCustomerID.AutoIncrement = true
        End Sub
        
        Public Function NewBookingRoomRow() As BookingRoomRow
            Return CType(Me.NewRow,BookingRoomRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BookingRoomRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BookingRoomRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BookingRoomRowChangedEvent) Is Nothing) Then
                RaiseEvent BookingRoomRowChanged(Me, New BookingRoomRowChangeEvent(CType(e.Row,BookingRoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BookingRoomRowChangingEvent) Is Nothing) Then
                RaiseEvent BookingRoomRowChanging(Me, New BookingRoomRowChangeEvent(CType(e.Row,BookingRoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BookingRoomRowDeletedEvent) Is Nothing) Then
                RaiseEvent BookingRoomRowDeleted(Me, New BookingRoomRowChangeEvent(CType(e.Row,BookingRoomRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BookingRoomRowDeletingEvent) Is Nothing) Then
                RaiseEvent BookingRoomRowDeleting(Me, New BookingRoomRowChangeEvent(CType(e.Row,BookingRoomRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBookingRoomRow(ByVal row As BookingRoomRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingRoomRow
        Inherits DataRow
        
        Private tableBookingRoom As BookingRoomDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBookingRoom = CType(Me.Table,BookingRoomDataTable)
        End Sub
        
        Public Property BookingID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoom.BookingIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoom.BookingIDColumn) = value
            End Set
        End Property
        
        Public Property EndDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoom.EndDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoom.EndDateColumn) = value
            End Set
        End Property
        
        Public Property RoomID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoom.RoomIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoom.RoomIDColumn) = value
            End Set
        End Property
        
        Public Property StartDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoom.StartDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoom.StartDateColumn) = value
            End Set
        End Property
        
        Public Property CustomerID As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoom.CustomerIDColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoom.CustomerIDColumn) = value
            End Set
        End Property
        
        Public Property CName As String
            Get
                Try 
                    Return CType(Me(Me.tableBookingRoom.CNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBookingRoom.CNameColumn) = value
            End Set
        End Property
        
        Public Property RoomRow As RoomRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("RoomBookingRoom")),RoomRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("RoomBookingRoom"))
            End Set
        End Property
        
        Public Function IsBookingIDNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoom.BookingIDColumn)
        End Function
        
        Public Sub SetBookingIDNull()
            Me(Me.tableBookingRoom.BookingIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoom.EndDateColumn)
        End Function
        
        Public Sub SetEndDateNull()
            Me(Me.tableBookingRoom.EndDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRoomIDNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoom.RoomIDColumn)
        End Function
        
        Public Sub SetRoomIDNull()
            Me(Me.tableBookingRoom.RoomIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoom.StartDateColumn)
        End Function
        
        Public Sub SetStartDateNull()
            Me(Me.tableBookingRoom.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustomerIDNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoom.CustomerIDColumn)
        End Function
        
        Public Sub SetCustomerIDNull()
            Me(Me.tableBookingRoom.CustomerIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCNameNull() As Boolean
            Return Me.IsNull(Me.tableBookingRoom.CNameColumn)
        End Function
        
        Public Sub SetCNameNull()
            Me(Me.tableBookingRoom.CNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BookingRoomRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BookingRoomRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BookingRoomRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BookingRoomRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
